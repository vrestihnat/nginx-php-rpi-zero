name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: 8.0.2-fpm-alpine3.12
  IMAGE_ID: vrestihnat/php-fpm-rpi-zero

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            cd ./build/php && docker build . --file Dockerfile --build-arg "TAG=$IMAGE_NAME"
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test
    strategy:
        matrix:
           imgs:
                - base
                - mysql
                - pgsql
                  
    runs-on: self-hosted
    if: github.event_name == 'push'
    name: Build - Push  ${{ matrix.imgs }}    
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          echo IMAGE_ID=$IMAGE_ID
          cd ./build/php && docker build . --file Dockerfile --tag $IMAGE_ID --build-arg "TAG=$IMAGE_NAME" --target ${{ matrix.imgs }}

      - name: Log into registry
        #run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username ${{ github.actor }} --password-stdin 
      - name: Push image
        run: |
          #IMAGE_ID=${{ github.repository }}
          # Change all uppercase to lowercase
          #IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo IMAGE_NAME=$IMAGE_NAME
          echo TARGET=${{ matrix.imgs }}

          [[ "${{ matrix.imgs }}" == "base" ]] && docker tag $IMAGE_ID $IMAGE_ID:$VERSION
          [[ "${{ matrix.imgs }}" == "base" ]] && docker push $IMAGE_ID:$VERSION

          [ "$VERSION" == "latest" ] && [[ "${{ matrix.imgs }}" == "base" ]] && docker tag $IMAGE_ID $IMAGE_ID:$IMAGE_NAME
          [ "$VERSION" == "latest" ] && [[ "${{ matrix.imgs }}" == "base" ]] && docker push $IMAGE_ID:$IMAGE_NAME
          
          [[ "${{ matrix.imgs }}" != "base" ]] && docker tag $IMAGE_ID $IMAGE_ID:$IMAGE_NAME-${{ matrix.imgs }}
          [[ "${{ matrix.imgs }}" != "base" ]] && docker push $IMAGE_ID:$IMAGE_NAME-${{ matrix.imgs }}
    
